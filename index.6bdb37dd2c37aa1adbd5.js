!function(){"use strict";const t={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let e;const a=new Uint8Array(16);function o(){if(!e&&(e="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!e))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return e(a)}const s=[];for(let t=0;t<256;++t)s.push((t+256).toString(16).slice(1));const n=function(e,a,n){if(t.randomUUID&&!a&&!e)return t.randomUUID();const l=(e=e||{}).random||(e.rng||o)();if(l[6]=15&l[6]|64,l[8]=63&l[8]|128,a){n=n||0;for(let t=0;t<16;++t)a[n+t]=l[t];return a}return function(t,e=0){return(s[t[e+0]]+s[t[e+1]]+s[t[e+2]]+s[t[e+3]]+"-"+s[t[e+4]]+s[t[e+5]]+"-"+s[t[e+6]]+s[t[e+7]]+"-"+s[t[e+8]]+s[t[e+9]]+"-"+s[t[e+10]]+s[t[e+11]]+s[t[e+12]]+s[t[e+13]]+s[t[e+14]]+s[t[e+15]]).toLowerCase()}(l)};class l{id=n();status=!1;createdAt=new Date;constructor(t,e){this.text=t.replace(/[<>]/gi,""),this.tags=e.split(",").map((t=>t.trim().toLowerCase()))}}const r=()=>{const t=localStorage.getItem("tasks-djess-v");let e=[];return t&&(e=JSON.parse(t,((t,e)=>"createdAt"===t?new Date(e):e))),e},i=t=>{localStorage.setItem("tasks-djess-v",JSON.stringify(t))},d=[{id:"alphabet",title:"Алфавиту",subTitle1:"возрастанию",subTitle2:"убыванию"},{id:"date",title:"Дате",subTitle1:"сначала новые",subTitle2:"сначала старые"},{id:"status",title:"Статусу",subTitle1:"выполненно",subTitle2:"невыполненно"},{id:"tag",title:"Тегам",subTitle1:"Введите теги",subTitle2:""}];class c{static createStorage=()=>new Promise(((t,e)=>{const a=r();0===a.length&&(a.push(new l("Создать задачу","задача")),i(a)),t(a)}));static fetchAll=()=>new Promise(((t,e)=>{t(r())}));static search=t=>new Promise(((e,a)=>{let o=r();o=o.filter((e=>e.text.toLowerCase().includes(t))),e(o)}));static createTask=t=>new Promise(((e,a)=>{const o=r();o.push(t),i(o),e(o)}));static delete=t=>new Promise(((e,a)=>{let o=r();o=o.filter((e=>e.id!==t)),i(o),e(o)}));static update=(t,e,a)=>new Promise(((o,s)=>{let n=r();n=n.map((o=>(o.id===t&&(e&&(o.text=e.replace(/[<>]/gi,"")),(a||!1===a)&&(o.status=a)),o))),i(n),o(n)}));static sortBy=(t,e)=>new Promise(((a,o)=>{let s=r();switch(t){case d[0].id:switch(e){case`${d[0].id}1`:s=s.sort(((t,e)=>t.text>e.text?1:t.text<e.text?-1:0));break;case`${d[0].id}2`:s=s.sort(((t,e)=>t.text<e.text?1:t.text>e.text?-1:0))}break;case d[1].id:switch(e){case`${d[1].id}1`:s=s.sort(((t,e)=>e.createdAt.getTime()-t.createdAt.getTime()));break;case`${d[1].id}2`:s=s.sort(((t,e)=>t.createdAt.getTime()-e.createdAt.getTime()))}break;case d[2].id:switch(e){case`${d[2].id}1`:s=s.sort(((t,e)=>!t.status&&e.status?1:t.status&&!e.status?-1:0));break;case`${d[2].id}2`:s=s.sort(((t,e)=>t.status&&!e.status?1:!t.status&&e.status?-1:0))}break;case d[3].id:{const t=e.split(",").map((t=>t.trim().toLowerCase())).filter((t=>""!==t));s=s.sort(((e,a)=>{const o=e.tags.reduce(((e,a)=>(t.includes(a)?1:0)+e),0),s=a.tags.reduce(((e,a)=>(t.includes(a)?1:0)+e),0);return o<s?1:o>s?-1:0}));break}}a(s)}))}const _=(t,e)=>{const a=t.querySelector(`.task-${e}`).querySelector(".task__text");t.insertAdjacentHTML("beforeend",'\n   <div class="app__modal-backdrop"></div>\n      <div class=\'app__modal-wrapper modal-wrapper\'>\n        <div class="modal-wrapper__modal modal ">\n          <div class="modal__content content-modal">\n            <div class="content-modal__header">\n              <h3 class="content-modal__header_title">Обновить задачу</h3>\n            </div>\n            <div class=\'content-modal__body body-modal body-modal-update\'>               \n              <label>Внесите изменения</label>\n              <input class=\'body-modal-update__input _input\' />\n              <p class=\'body-modal__error-message\'>Пустая строка недопустима</p>\n            </div>\n            <div class="content-modal__footer footer-content-modal">\n              <button class="footer-content-modal__button-update _button">\n                Обновить\n              </button>              \n              <button class="footer-content-modal__button-cancel _button">\n                Отмена\n              </button>            \n            </div>\n          </div>\n        </div>\n      </div>\n   ');const o=t.querySelector(".body-modal-update__input");o.setAttribute("value",`${a.textContent}`);const s=t.querySelector(".footer-content-modal__button-cancel");s.addEventListener("click",(()=>{const e=t.querySelector(".app__modal-backdrop"),a=t.querySelector(".app__modal-wrapper");e.remove(),a.remove()})),t.querySelector(".footer-content-modal__button-update").addEventListener("click",(async()=>{if(""===o.value){const e=t.querySelector(".body-modal__error-message");e.style.display="block",setTimeout((()=>{e.style.display=""}),3e3)}else{const t=o.value.replace(/[<>]/gi,"");a.innerHTML=t,s.click(),await c.update(e,t)}}))};function u(t,e){const a=t.querySelector(".app__tasks");a.innerHTML=`${e.map(((t,e,a)=>{let o="";const s=`${p(t.createdAt.getDate())}.${p(t.createdAt.getMonth()+1)}.${t.createdAt.getFullYear()} ${p(t.createdAt.getHours())}:${p(t.createdAt.getMinutes())}`;return 0===e&&(o='<li class="tasks__task task task-header">\n            <div class="task__text">Описание задачи</div>\n            <div class="task__options task__options_type_status">Статус</div>\n            <div class="task__options task__options_type_update">Изменить</div>\n            <div class="task__options task__options_type_delete">Удалить</div>\n            <div class="task__createdAt">Создано</div>\n          </li><hr/>'),o+=`<li id=${t.id} class="tasks__task task task-${t.id}">\n          <div class="task__text text-task" title='Теги - ${t.tags.join(", ")}'>${t.text}</div>\n          <div class="task__options task__options_type_status status"><input class="status__input" type="checkbox" ${t.status?"checked":""}/></div>\n          <div class="task__options task__options_type_update update"><button class="update__button _task-button"></button></div>\n          <div class="task__options task__options_type_delete delete"><button class="delete__button _task-button"></button></div>\n          <div class="task__createdAt">${s}</div>\n    </li>${e===a.length-1?"<hr/>":""}`,o})).join("")}`;const o=a.querySelectorAll(".delete__button");for(const t of o)t.addEventListener("click",(async t=>{const e=t.target,o=e?.parentElement?.parentElement?.id;o&&(a.querySelector(`.task-${o}`).remove(),1===a.querySelectorAll(".task").length&&(a.innerHTML=""),await c.delete(o))}));const s=a.querySelectorAll(".update__button");for(const e of s)e.addEventListener("click",(async e=>{const a=e.target,o=a?.parentElement?.parentElement?.id;o&&_(t,o)}));const n=a.querySelectorAll(".status__input");for(const t of n)t.addEventListener("click",(async e=>{const a=e.target,o=a?.parentElement?.parentElement?.id;o&&await c.update(o,"",t.checked)}))}function p(t){return t<10?`0${String(t)}`:String(t)}const m=document.getElementById("app");m&&(async t=>{let e=await c.createStorage();t.innerHTML='\n   <h1 class="app__title">Календарь задач</h1>\n   <form class="app__form-search form-search"><input class="form-search__inpit _input" required/>\n   <button class="form-search__button _button" type="submit">Найти задачу по описанию</button>\n   <p class=\'form-search__message\'>По вашему запросу записей не найдено!</p></form>\n   <div class="app__buttons-up app-buttons-up">\n   <button class="app-buttons-up__button-filter _button">Фильтр</button>\n   <button class="app-buttons-up__button-fetch-all _button">Получить все записи</button>\n   </div> \n   <p class=\'app__message\'>У вас нет записей!</p>  \n   <ol class="app__tasks tasks"></ol>\n   <button class="app__button-create-task _button">Создать задачу</button>\n   ',u(t,e),t.querySelector(".app__form-search").addEventListener("submit",(async a=>{a.preventDefault();const o=t.querySelector(".form-search__inpit");if(e=await c.search(o.value.toLowerCase().trim()),0===e.length){const e=t.querySelector(".form-search__message");e.style.opacity="1",setTimeout((()=>{e.style.opacity="0"}),3e3)}else u(t,e);o.value=""})),t.querySelector(".app-buttons-up__button-filter").addEventListener("click",(()=>{(t=>{const e=`${d.map(((t,e)=>`\n    <div class='filter-body__item item-filter-body'>\n\n      <div class='item-filter-body__left'>\n        <label class='item-filter-body__label item-filter-body__label_type_left' for='${t.id}' >${t.title}</label>\n        <input class='item-filter-body__radio item-filter-body__radio_pos_left item-filter-body__radio_pos_left-${t.id}' type='radio' id='${t.id}' name='filter' value='${t.id}' />\n      </div>\n\n      <div id='rBlock_${t.id}' class='item-filter-body__right right-filter-body item-filter-body__right_name_filter-${t.id}' >\n      \n        <div class='right-filter-body__up'>\n          ${3!==e?`\n          <label class='item-filter-body__label' for='${t.id}Up' >${t.subTitle1}</label>\n          <input id='${t.id}Up' class='item-filter-body__radio item-filter-body__radio_pos_right item-filter-body__radio_pos_right-${t.id}1' type='radio' name='filter-${e+1}' value='${t.id}1' />`:`<label class='item-filter-body__label_type_tag' for='${t.id}' >${t.subTitle1}</label>\n          <input id='${t.id}' class="item-filter-body__tag-input _input" placeholder='Через запятую' />`}\n        </div>\n\n        ${3!==e?`<div class='right-filter-body__down'>\n          <label class='item-filter-body__label' for='${t.id}Down' >${t.subTitle2}</label>\n          <input class='item-filter-body__radio item-filter-body__radio_pos_right item-filter-body__radio_pos_right-${t.id}2' type='radio' id='${t.id}Down' name='filter-${e+1}' value='${t.id}2' />\n        </div>`:""}                                      \n      </div>\n                                 \n    </div>`)).join("")}`;t.insertAdjacentHTML("beforeend",`\n      <div class="app__modal-backdrop"></div>\n      <div class='app__modal-wrapper modal-wrapper'>\n        <div class="modal-wrapper__modal modal ">\n          <div class="modal__content content-modal">\n            <div class="content-modal__header">\n              <h3 class="content-modal__header_title">Сортировать по:</h3>\n            </div>\n            <div class='content-modal__body body-modal filter-body'>\n\n              ${e}                \n              <p class='body-modal__error-message'>Недостаточно данных для сортировки или теги введены некорректно</p>  \n\n            </div>\n            <div class="content-modal__footer footer-content-modal">\n              <button class="footer-content-modal__button-filter _button">\n                Сортировать\n              </button>              \n              <button class="footer-content-modal__button-cancel _button">\n                Отмена\n              </button>            \n            </div>\n          </div>\n        </div>\n      </div>\n   `);const a=t.querySelector(".footer-content-modal__button-cancel");a.addEventListener("click",(()=>{const e=t.querySelector(".app__modal-backdrop"),a=t.querySelector(".app__modal-wrapper");e.remove(),a.remove()}));const o=t.querySelector(".item-filter-body__tag-input"),s=t.querySelectorAll(".item-filter-body__radio_pos_left");for(const e of s)e.addEventListener("change",(e=>{const a=e.target,s=t.querySelectorAll(".right-filter-body");for(const t of s)if(t.id===`rBlock_${a.value}`)t.style.display="grid";else{t.style.display="none";const e=t.querySelectorAll(".item-filter-body__radio");for(const t of e)t.checked=!1;o.value=""}}));t.querySelector(".footer-content-modal__button-filter").addEventListener("click",(async()=>{let e;const s=t.querySelectorAll(".item-filter-body__radio"),n=Array.from(s).filter((t=>t.checked));if(2===n.length)e=await c.sortBy(n[0].value,n[1].value),u(t,e),a.click();else if(1===n.length&&"tag"===n[0].value&&""!==o.value&&/^([а-яА-Яa-zA-Z0-9]+\s?)$|^([а-яА-Яa-zA-Z0-9]+,\s?)+/.test(o.value))e=await c.sortBy(n[0].value,o.value),u(t,e),a.click();else{const e=t.querySelector(".body-modal__error-message");e.style.display="block",setTimeout((()=>{e.style.display=""}),5e3)}}))})(t)})),t.querySelector(".app-buttons-up__button-fetch-all").addEventListener("click",(async a=>{if(e=await c.fetchAll(),0===e.length){const e=t.querySelector(".app__message");e.style.display="block",setTimeout((()=>{e.style.display=""}),3e3)}else u(t,e)})),t.querySelector(".app__button-create-task").addEventListener("click",(()=>{(t=>{t.insertAdjacentHTML("beforeend","\n   <div class=\"app__modal-backdrop\"></div>\n      <div\n        class='app__modal-wrapper modal-wrapper'\n      >\n        <div class=\"modal-wrapper__modal modal \">\n          <div\n            class=\"modal__content content-modal\"\n          >\n            <div class=\"content-modal__header\">\n              <h3 class=\"content-modal__header_title\">Добавить задачу</h3>\n            </div>\n            <div class='content-modal__body body-modal body-modal-create'>\n                <label class='body-modal-create__label'>Опишите задачу</label>\n                <input class='body-modal-create__input_type_create _input'/>\n                <br/>                  \n                <label class='body-modal-create__label'>Теги</label>\n                <input class='body-modal-create__input_type_tags _input' placeholder='Вводите теги через запятую'/> \n                <p class='body-modal__message'>Теги отображаются при наведении курсора мыши на текст задачи</p>                 \n                <p class='body-modal__error-message'>Поле описания задачи не должно быть пустым, теги можно не заполнять или заполнить в соответствии с требованиями</p>\n            </div>\n            <div class=\"content-modal__footer footer-content-modal\">\n              <button class=\"footer-content-modal__button-create _button\">\n                  Добавить\n                </button>              \n                <button class=\"footer-content-modal__button-cancel _button\">\n                Отмена\n              </button>            \n            </div>\n          </div>\n        </div>\n      </div>\n   ");const e=t.querySelector(".footer-content-modal__button-cancel");e.addEventListener("click",(()=>{const e=t.querySelector(".app__modal-backdrop"),a=t.querySelector(".app__modal-wrapper");e.remove(),a.remove()})),t.querySelector(".footer-content-modal__button-create").addEventListener("click",(async()=>{const a=t.querySelector(".body-modal-create__input_type_create"),o=t.querySelector(".body-modal-create__input_type_tags");if(""!==a.value&&/^$|^([а-яёА-ЯЁa-zA-Z0-9\s]+\s?)$|^([а-яёА-ЯЁa-zA-Z0-9\s]+,\s?)+/.test(o.value)){const s=await c.createTask(new l(a.value,o.value));u(t,s),e.click()}else{const e=t.querySelector(".body-modal__error-message");e.style.display="block",setTimeout((()=>{e.style.display=""}),7e3)}}))})(t)}))})(m)}();